generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  username String   @unique
  password String
  isAdmin  Boolean  @default(false) @map("is_admin")
  ctime    DateTime @default(now()) @map("created_at")
  mtime    DateTime @updatedAt @map("modified_at")

  createdLibraries Library[]
  visibleLibraries VisibleLibrary[]
  comments         FileComment[]    @relation("user-on-comment")

  @@index([username])
  @@map("user")
}

model VisibleLibrary {
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  libraryId String   @map("library_id")
  library   Library  @relation(fields: [libraryId], references: [id])
  ctime     DateTime @default(now()) @map("created_at")
  mtime     DateTime @updatedAt @map("modified_at")

  @@id([userId, libraryId])
  @@index([libraryId, userId])
  @@map("visible_library")
}

model Library {
  id             String   @id @default(cuid())
  creatorId      String   @map("creator_id")
  creator        User     @relation(fields: [creatorId], references: [id])
  root           String
  ctime          DateTime @default(now()) @map("created_at")
  mtime          DateTime @updatedAt @map("modified_at")
  linkedFolderId String   @unique @map("linked_folder_id")
  linkedFolder   Folder   @relation("linked_folder", fields: [linkedFolderId], references: [id])

  visibleLibraries VisibleLibrary[]
  folders          Folder[]
  files            File[]           @relation("library")

  @@map("library")
}

model Folder {
  id            String   @id @default(cuid())
  libraryId     String   @map("library_id")
  library       Library  @relation(fields: [libraryId], references: [id])
  parentId      String?  @map("parent_id")
  parent        Folder?  @relation("parent", fields: [parentId], references: [id])
  linkedLibrary Library? @relation("linked_folder")

  name  String
  ctime DateTime @default(now()) @map("created_at")
  mtime DateTime @updatedAt @map("modified_at")

  subFolders Folder[] @relation("parent")
  files      File[]   @relation("parent")

  @@index([libraryId, parentId])
  @@map("folder")
}

model File {
  id        String   @id @default(cuid())
  libraryId String   @map("library_id")
  library   Library  @relation("library", fields: [libraryId], references: [id])
  parentId  String   @map("parent_id")
  parent    Folder?  @relation("parent", fields: [parentId], references: [id])
  name      String
  sha256    String
  ctime     DateTime
  mtime     DateTime

  comments FileComment[]   @relation("file-on-comment")
  tags     FileTagOnFile[] @relation("file-on-tag")

  @@index([sha256, libraryId, parentId])
  @@map("file")
}

model FileComment {
  id      Int      @id @default(autoincrement())
  fileId  String
  file    File     @relation("file-on-comment", fields: [fileId], references: [id])
  userId  String   @map("user_id")
  user    User     @relation("user-on-comment", fields: [userId], references: [id])
  content String
  ctime   DateTime @default(now()) @map("created_at")
  mtime   DateTime @updatedAt @map("modified_at")
}

model FileTag {
  id    Int      @id @default(autoincrement())
  name  String
  ctime DateTime @default(now()) @map("created_at")
  mtime DateTime @updatedAt @map("modified_at")

  files FileTagOnFile[]

  @@index([name])
  @@map("file_tag")
}

model FileTagOnFile {
  tagId Int     @map("tag_id")
  tag   FileTag @relation(fields: [tagId], references: [id])

  fileId String
  file   File   @relation("file-on-tag", fields: [fileId], references: [id])

  ctime DateTime @default(now()) @map("created_at")

  @@id([tagId, fileId])
  @@map("file_tag_on_file")
}
