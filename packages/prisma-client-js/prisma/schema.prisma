generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  username String   @unique
  password String
  isAdmin  Boolean  @default(false) @map("is_admin")
  ctime    DateTime @default(now()) @map("created_at")
  mtime    DateTime @updatedAt @map("modified_at")

  createdRepositories Repository[]
  visibleRepositories VisibleRepository[]
  comments            FileComment[]       @relation("user-on-comment")
  createdFolders      Folder[]            @relation("folder_creator")
  createdFiles        File[]              @relation("file_creator")

  @@index([username])
  @@map("user")
}

model VisibleRepository {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  repositoryId String     @map("repository_id")
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  ctime DateTime @default(now()) @map("created_at")
  mtime DateTime @updatedAt @map("modified_at")

  @@id([userId, repositoryId])
  @@index([repositoryId, userId])
  @@map("visible_repository")
}

model Repository {
  id    String   @id @default(cuid())
  path  String   @unique
  ctime DateTime @default(now()) @map("created_at")
  mtime DateTime @updatedAt @map("modified_at")

  creatorId String @map("creator_id")
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: NoAction)

  linkedFolderId String? @unique @map("linked_folder_id")
  linkedFolder   Folder? @relation("linked_folder", fields: [linkedFolderId], references: [id], onDelete: SetNull)

  visibleRepositories VisibleRepository[]
  folders             Folder[]
  files               File[]              @relation("repository")

  @@map("repository")
}

model Folder {
  id    String   @id @default(cuid())
  name  String
  ctime DateTime @default(now()) @map("created_at")
  mtime DateTime @updatedAt @map("modified_at")

  repositoryId String?     @map("repository_id")
  repository   Repository? @relation(fields: [repositoryId], references: [id])

  parentId String? @map("parent_id")
  parent   Folder? @relation("parent", fields: [parentId], references: [id], onDelete: Cascade)

  creatorId String @map("creator_id")
  creator   User   @relation("folder_creator", fields: [creatorId], references: [id])

  linkedRepository Repository? @relation("linked_folder")
  subFolders       Folder[]    @relation("parent")
  files            File[]      @relation("parent")

  @@index([repositoryId, parentId])
  @@map("folder")
}

model File {
  id     String   @id @default(cuid())
  name   String
  sha256 String
  ctime  DateTime
  mtime  DateTime

  repositoryId String?     @map("repository_id")
  repository   Repository? @relation("repository", fields: [repositoryId], references: [id])

  parentId String? @map("parent_id")
  parent   Folder? @relation("parent", fields: [parentId], references: [id], onDelete: Cascade)

  creatorId String @map("creator_id")
  creator   User   @relation("file_creator", fields: [creatorId], references: [id])

  comments FileComment[]   @relation("file-on-comment")
  tags     FileTagOnFile[] @relation("file-on-tag")

  @@index([sha256, repositoryId, parentId])
  @@map("file")
}

model FileComment {
  id      Int      @id @default(autoincrement())
  fileId  String
  file    File     @relation("file-on-comment", fields: [fileId], references: [id], onDelete: Cascade)
  userId  String   @map("user_id")
  user    User     @relation("user-on-comment", fields: [userId], references: [id], onDelete: NoAction)
  content String
  ctime   DateTime @default(now()) @map("created_at")
  mtime   DateTime @updatedAt @map("modified_at")
}

model FileTag {
  id    Int      @id @default(autoincrement())
  name  String
  ctime DateTime @default(now()) @map("created_at")
  mtime DateTime @updatedAt @map("modified_at")

  files FileTagOnFile[]

  @@index([name])
  @@map("file_tag")
}

model FileTagOnFile {
  tagId Int     @map("tag_id")
  tag   FileTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  fileId String
  file   File   @relation("file-on-tag", fields: [fileId], references: [id], onDelete: Cascade)

  ctime DateTime @default(now()) @map("created_at")

  @@id([tagId, fileId])
  @@map("file_tag_on_file")
}
